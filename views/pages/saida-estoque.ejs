<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle de Estoque - Saída</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Reset e Estilos Gerais */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Arial, sans-serif;
        }

        body {
            background: #f5f7fa;
            overflow-x: hidden;
        }

        /* Header */
        .header-container {
            display: flex;
            align-items: center;
            padding: 15px 25px;
            background: #11114e;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: relative;
            z-index: 10;
        }

        /* Menu Hambúrguer - Posicionado à esquerda */
        .hamburger-menu {
            background: none;
            border: none;
            cursor: pointer;
            padding: 10px;
            height: 40px;
            width: 40px;
            position: relative;
            z-index: 100;
            margin-right: 15px;
        }

        .hamburger-icon {
            display: block;
            width: 24px;
            height: 2px;
            background: #ecf0f1;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.3s ease;
        }

        .hamburger-icon:before,
        .hamburger-icon:after {
            content: '';
            display: block;
            width: 24px;
            height: 2px;
            background: #ecf0f1;
            position: absolute;
            left: 0;
            transition: all 0.3s ease;
        }

        .hamburger-icon:before {
            top: -8px;
        }

        .hamburger-icon:after {
            top: 8px;
        }

        .hamburger-menu.active .hamburger-icon {
            background: transparent;
        }

        .hamburger-menu.active .hamburger-icon:before {
            transform: translateY(8px) rotate(45deg);
            background: #e74c3c;
        }

        .hamburger-menu.active .hamburger-icon:after {
            transform: translateY(-8px) rotate(-45deg);
            background: #e74c3c;
        }

        /* Título ajustado */
        .page-title {
            color: #ecf0f1;
            font-size: 1.8rem;
            font-weight: 700;
            letter-spacing: 1px;
            margin: 0 auto 0 0;
            padding-left: 20px;
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
            width: max-content;
        }

        /* Menu de Navegação - Agora como menu lateral */
        .nav-menu {
            position: fixed;
            top: 0;
            left: -300px;
            width: 250px;
            height: 100vh;
            background: #1a3775;
            transition: left 0.4s ease;
            z-index: 5;
            padding-top: 80px;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
        }

        .nav-menu.active {
            left: 0;
        }

        .nav-menu ul {
            list-style: none;
            padding: 20px;
        }

        .nav-menu li {
            margin-bottom: 15px;
        }

        .nav-menu a {
            color: #ecf0f1;
            text-decoration: none;
            font-size: 1.1rem;
            transition: color 0.3s;
            display: block;
            padding: 12px 15px;
            border-radius: 5px;
        }

        .nav-menu a:hover {
            color: #3498db;
            background: rgba(255, 255, 255, 0.1);
        }

        /* Overlay para quando o menu estiver aberto */
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 4;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }

        .overlay.active {
            opacity: 1;
            visibility: visible;
        }

        /* Estilos específicos para o formulário de saída de estoque */
        .main-content {
            max-width: 800px;
            margin: 30px auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 15px;
            position: relative;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }

        input,
        select {
            width: 100%;
            padding: 10px;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        button[type="submit"] {
            background: #11114e;
            color: white;
            border: none;
            padding: 12px 15px;
            width: 100%;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: background 0.3s;
        }

        button[type="submit"]:hover {
            background: #1a3775;
        }

        .alert {
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 4px;
            display: none;
        }

        .error {
            background: #ffdddd;
            color: #d8000c;
        }

        .success {
            background: #ddffdd;
            color: #4F8A10;
        }

        .stock-info {
            font-size: 13px;
            margin-top: 5px;
            color: #666;
        }

        .uppercase-input {
            text-transform: uppercase;
        }

        .uppercase-input::placeholder {
            text-transform: none;
        }

        /* Estilos para o datalist, tentando sobrescrever o padrão do navegador */
        /* Note: O suporte a estilização de datalist é limitado e varia entre navegadores */
        datalist {
            background-color: white;
            /* Cor de fundo */
            border: 1px solid #ccc;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            max-height: 200px;
            overflow-y: auto;
        }

        datalist option {
            padding: 8px 10px;
            /* Espaçamento interno */
            color: #333;
            /* Cor do texto */
            background-color: white;
            /* Cor de fundo individual da opção */
            cursor: pointer;
            transition: background-color 0.2s;
        }

        datalist option:hover,
        datalist option:active {
            background-color: #f0f0f0;
            /* Cor de fundo ao passar o mouse/selecionar */
            color: #11114e;
            /* Cor do texto ao passar o mouse */
        }
    </style>
</head>

<body>
    <header>
        <div class="header-container">
            <button class="hamburger-menu" aria-label="Abrir menu">
                <span class="hamburger-icon"></span>
            </button>

            <h1 class="page-title">SAÍDA DE ESTOQUE</h1>
        </div>
    </header>

    <nav class="nav-menu">
        <ul>
            <li><a href="/inicio">Início</a></li>
            <li><a href="/cadastro-produtos">Cadastrar Produtos</a></li>
            <li><a href="/saida-estoque">Saída de Estoque</a></li>
            <% if (currentUser && currentUser.nivel_acesso === 'administrador') { %>
            <li><a href="/relatorios">Relatórios de Estoque</a></li>
            <li><a href="/gerenciar-usuarios">Gerenciar Usuário</a></li>
            <% } %>
            <li><a href="/sair">Sair da Conta</a></li>
        </ul>
    </nav>

    <main class="main-content">
        <h1>Registrar Saída de Estoque</h1>

        <div id="alert" class="alert"></div>

        <form id="estoqueForm">
            <div class="form-group">
                <label for="nome">Nome do Produto</label>
                <input type="text" id="nome" name="nome" placeholder="Digite o nome do produto" class="uppercase-input"
                    oninput="this.value = this.value.toUpperCase()" list="productSuggestions" required>
                <datalist id="productSuggestions"></datalist>
                <small class="stock-info" id="nomeStockInfo"></small>
            </div>

            <div class="form-group">
                <label for="marca">Marca</label>
                <input type="text" id="marca" name="marca" placeholder="Digite a marca do produto"
                    class="uppercase-input" oninput="this.value = this.value.toUpperCase()" required>
                <small class="stock-info" id="marcaStockInfo"></small>
            </div>

            <div class="form-group">
                <label for="quantidade">Quantidade</label>
                <input type="number" id="quantidade" name="quantidade" placeholder="Digite a quantidade" required
                    min="1">
            </div>

            <button type="submit">Registrar</button>
        </form>
    </main>

    <div class="overlay"></div>

    <div class="modal fade" id="sucessoModal" tabindex="-1" aria-labelledby="sucessoModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="sucessoModalLabel">Sucesso</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    Saída de estoque registrada com sucesso!
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal"
                        id="fecharModalSucesso">OK</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="erroModal" tabindex="-1" aria-labelledby="erroModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="erroModalLabel">Erro</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body" id="erroModalMessage">
                    </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const hamburgerMenu = document.querySelector('.hamburger-menu');
            const navMenu = document.querySelector('.nav-menu');
            const overlay = document.querySelector('.overlay');

            hamburgerMenu.addEventListener('click', function () {
                this.classList.toggle('active');
                navMenu.classList.toggle('active');
                overlay.classList.toggle('active');
            });

            overlay.addEventListener('click', () => {
                hamburgerMenu.classList.remove('active');
                navMenu.classList.remove('active');
                overlay.classList.remove('active');
            });

            document.querySelectorAll('.nav-menu a').forEach(item => {
                item.addEventListener('click', () => {
                    hamburgerMenu.classList.remove('active');
                    navMenu.classList.remove('active');
                    overlay.classList.remove('active');
                });
            });

            const form = document.getElementById('estoqueForm');
            const sucessoModal = new bootstrap.Modal(document.getElementById('sucessoModal'));
            const erroModal = new bootstrap.Modal(document.getElementById('erroModal'));
            const nomeInput = document.getElementById('nome');
            const marcaInput = document.getElementById('marca');
            const productSuggestionsDatalist = document.getElementById('productSuggestions');
            const nomeStockInfo = document.getElementById('nomeStockInfo');
            const marcaStockInfo = document.getElementById('marcaStockInfo');

            let debounceTimeout;

            function debounce(func, delay) {
                return function (...args) {
                    clearTimeout(debounceTimeout);
                    debounceTimeout = setTimeout(() => func.apply(this, args), delay);
                };
            }

            // Função para buscar e exibir sugestões no datalist
            const fetchSuggestions = debounce(async function () {
                const searchTerm = nomeInput.value.trim().toUpperCase();
                // AQUI está a mudança: Agora a busca começa com 1 ou mais caracteres.
                if (searchTerm.length < 1) {
                    productSuggestionsDatalist.innerHTML = '';
                    return;
                }

                try {
                    const response = await fetch(`/api/produtos/sugestoes?q=${searchTerm}`);
                    const suggestions = await response.json();

                    productSuggestionsDatalist.innerHTML = '';

                    if (suggestions.length > 0) {
                        suggestions.forEach(item => {
                            const option = document.createElement('option');
                            option.value = `${item.nome} - ${item.marca}`;
                            option.dataset.nome = item.nome;
                            option.dataset.marca = item.marca;
                            productSuggestionsDatalist.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error('Erro ao buscar sugestões:', error);
                    productSuggestionsDatalist.innerHTML = '';
                }
            }, 300);

            // Função para buscar e exibir o estoque de um produto
            async function checkProductStock(nome, marca) {
                try {
                    const response = await fetch(`/api/produtos/estoque?nome=${nome}&marca=${marca}`);
                    const data = await response.json();

                    if (data.success && data.produto) {
                        nomeStockInfo.textContent = `Estoque disponível: ${data.produto.estoque}`;
                        nomeStockInfo.style.color = data.produto.estoque < 10 ? '#e74c3c' : '#27ae60';
                    } else {
                        nomeStockInfo.textContent = 'Produto não encontrado ou sem estoque.';
                        nomeStockInfo.style.color = '#e74c3c';
                    }
                } catch (error) {
                    console.error('Erro ao buscar estoque:', error);
                    nomeStockInfo.textContent = 'Erro ao verificar estoque.';
                    nomeStockInfo.style.color = '#e74c3c';
                }
            }

            nomeInput.addEventListener('input', fetchSuggestions);

            nomeInput.addEventListener('change', async function () {
                const fullValue = nomeInput.value.trim();
                let nomeParaBusca = fullValue;
                let marcaParaBusca = '';

                let selectedOption = Array.from(productSuggestionsDatalist.options).find(option => option.value === fullValue);

                if (selectedOption) {
                    nomeParaBusca = selectedOption.dataset.nome;
                    marcaParaBusca = selectedOption.dataset.marca;
                } else {
                    const match = fullValue.match(/(.*) - (.*)/);
                    if (match && match.length === 3) {
                        nomeParaBusca = match[1].trim();
                        marcaParaBusca = match[2].trim();
                    } else {
                        marcaParaBusca = marcaInput.value.trim();
                    }
                }

                nomeInput.value = nomeParaBusca;
                marcaInput.value = marcaParaBusca;

                if (nomeParaBusca && marcaParaBusca) {
                    checkProductStock(nomeParaBusca, marcaParaBusca);
                } else {
                    nomeStockInfo.textContent = '';
                }
            });

            marcaInput.addEventListener('change', function () {
                const nomePuro = nomeInput.value.trim();
                const marcaPreenchida = marcaInput.value.trim();
                if (nomePuro && marcaPreenchida) {
                    checkProductStock(nomePuro, marcaPreenchida);
                } else {
                    nomeStockInfo.textContent = '';
                }
            });

            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                try {
                    const data = {
                        nome: nomeInput.value,
                        marca: marcaInput.value,
                        quantidade: parseInt(document.getElementById('quantidade').value)
                    };

                    if (!data.nome || !data.marca || !data.quantidade) {
                        document.getElementById('erroModalMessage').textContent = 'Por favor, preencha todos os campos!';
                        erroModal.show();
                        return;
                    }

                    const response = await fetch('/saida-estoque', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (result.success) {
                        sucessoModal.show();
                        document.getElementById('sucessoModal').addEventListener('hidden.bs.modal', function () {
                            form.reset();
                            nomeStockInfo.textContent = '';
                            marcaStockInfo.textContent = '';
                        });
                    } else {
                        document.getElementById('erroModalMessage').textContent = result.error || 'Erro ao processar saída de estoque';
                        erroModal.show();
                    }
                } catch (error) {
                        console.error('Erro:', error);
                        document.getElementById('erroModalMessage').textContent = 'Erro ao enviar formulário';
                        erroModal.show();
                    }
                });
            });
    </script>
</body>

</html>