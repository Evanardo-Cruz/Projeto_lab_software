<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle de Estoque</title>
    <style>
        /* Reset e Estilos Gerais */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Arial, sans-serif;
        }

        body {
            background: #f5f7fa; /* Mantido um cinza claro para o corpo */
            overflow-x: hidden;
        }

        /* Header */
        .header-container {
            display: flex;
            align-items: center;
            padding: 15px 25px;
            background: #E08C27; /* LARANJA */
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: relative;
            z-index: 10;
        }

        /* Menu Hambúrguer */
        .hamburger-menu {
            background: none;
            border: none;
            cursor: pointer;
            padding: 10px;
            height: 40px;
            width: 40px;
            position: relative;
            z-index: 100;
            margin-right: 15px;
        }

        .hamburger-icon {
            display: block;
            width: 24px;
            height: 2px;
            background: #FFFFFF; /* BRANCO */
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.3s ease;
        }

        .hamburger-icon:before,
        .hamburger-icon:after {
            content: '';
            display: block;
            width: 24px;
            height: 2px;
            background: #FFFFFF; /* BRANCO */
            position: absolute;
            left: 0;
            transition: all 0.3s ease;
        }

        .hamburger-icon:before {
            top: -8px;
        }

        .hamburger-icon:after {
            top: 8px;
        }

        .hamburger-menu.active .hamburger-icon {
            background: transparent;
        }

        .hamburger-menu.active .hamburger-icon:before {
            transform: translateY(8px) rotate(45deg);
            background: #e74c3c; /* Mantido vermelho para indicar ação */
        }

        .hamburger-menu.active .hamburger-icon:after {
            transform: translateY(-8px) rotate(-45deg);
            background: #e74c3c; /* Mantido vermelho para indicar ação */
        }

        /* Título */
        .page-title {
            color: #FFFFFF; /* BRANCO */
            font-size: 1.8rem;
            font-weight: 700;
            letter-spacing: 1px;
            margin: 0 auto 0 0;
            padding-left: 20px;
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
            width: max-content;
        }

        /* Barra de Pesquisa */
        .search-container {
            display: flex;
            align-items: center;
            background: #dcdcdc; /* Um tom de cinza mais claro */
            border-radius: 30px;
            padding: 5px 15px;
            transition: all 0.3s;
            margin-left: auto;
        }

        .search-container:focus-within {
            box-shadow: 0 0 0 2px #E08C27; /* LARANJA */
        }

        .search-input {
            border: none;
            background: transparent;
            color: #333333; /* Texto escuro para contraste */
            padding: 8px;
            width: 180px;
            outline: none;
            font-size: 1rem;
        }

        .search-input::placeholder {
            color: #888888; /* Placeholder em cinza médio */
        }

        .search-button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .search-icon {
            width: 18px;
            height: 18px;
            fill: none;
            stroke: #333333; /* Ícone escuro para contraste */
            stroke-width: 2;
            stroke-linecap: round;
            stroke-linejoin: round;
        }

        /* Menu de Navegação Lateral */
        .nav-menu {
            position: fixed;
            top: 0;
            left: -300px;
            width: 250px;
            height: 100vh;
            background: #0E7F1B; /* VERDE */
            transition: left 0.4s ease;
            z-index: 5;
            padding-top: 80px;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
        }

        .nav-menu.active {
            left: 0;
        }

        .nav-menu ul {
            list-style: none;
            padding: 20px;
        }

        .nav-menu li {
            margin-bottom: 15px;
        }

        .nav-menu a {
            color: #FFFFFF; /* BRANCO */
            text-decoration: none;
            font-size: 1.1rem;
            transition: color 0.3s;
            display: block;
            padding: 12px 15px;
            border-radius: 5px;
        }

        .nav-menu a:hover {
            color: #E08C27; /* LARANJA no hover */
            background: rgba(255, 255, 255, 0.1);
        }

        /* Overlay para o menu */
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 4;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }

        .overlay.active {
            opacity: 1;
            visibility: visible;
        }

        /* Estilos para a tabela de usuários */
        table {
            width: 100%;
            margin-top: 20px;
            box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
        }

        th,
        td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        tr:hover {
            background-color: #e0e0e0; /* Um cinza mais claro no hover da linha */
        }

        /* Estilos para o toast de notificação */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #333;
            color: #FFFFFF; /* BRANCO */
            padding: 10px 20px;
            border-radius: 4px;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 1001;
        }

        .toast.show {
            opacity: 1;
        }

        /* Responsividade */
        @media (max-width: 768px) {
            .search-container {
                width: 150px;
            }

            table {
                display: block;
                overflow-x: auto;
            }
        }
    </style>
</head>

<body>
    <header>
        <div class="header-container">
            <button class="hamburger-menu" aria-label="Abrir menu">
                <span class="hamburger-icon"></span>
            </button>

            <h1 class="page-title">GERENCIAMENTO DE USUÁRIOS</h1>
        </div>
    </header>

    <nav class="nav-menu">
        <ul>
            <li><a href="/inicio">Início</a></li>
            <li><a href="/cadastro-produtos">Cadastrar Produtos</a></li>
            <li><a href="/saida-estoque">Saída de Estoque</a></li>
            <li><a href="/relatorios">Relatórios de Estoque</a></li>
            <li><a href="/gerenciar-usuarios">Gerenciar Usuário</a></li>
            <li><a href="/sair">Sair da Conta</a></li>
        </ul>
    </nav>

    <div class="overlay"></div>

    <main style="margin-left: 20px; margin-right: 20px; padding-top: 20px;">
        <div style="overflow-x: auto;">
            <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
                <thead>
                    <tr style="background-color: #E08C27; color: white;"> <th style="padding: 12px; text-align: left;">ID</th>
                        <th style="padding: 12px; text-align: left;">E-mail</th>
                        <th style="padding: 12px; text-align: left;">Nível de Acesso</th>
                        <th style="padding: 12px; text-align: left;">Data de Cadastro</th>
                        <th style="padding: 12px; text-align: left;">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    <% usuarios.forEach(usuario=> { %>
                        <tr style="border-bottom: 1px solid #ddd;">
                            <td style="padding: 12px;">
                                <%= usuario.id %>
                            </td>
                            <td style="padding: 12px;">
                                <%= usuario.email %>
                            </td>
                            <td style="padding: 12px;">
                                <%= usuario.nivel_acesso %>
                            </td>
                            <td style="padding: 12px;">
                                <%= usuario.data_cadastro %>
                            </td>
                            <td style="padding: 12px;">
                                <button class="edit-btn" data-id="<%= usuario.id %>"
                                    style="background-color: #0E7F1B; color: #FFFFFF; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; margin-right: 5px;">Editar</button>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>
        </div>
    </main>

    <div id="edit-user-modal"
        style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2); z-index: 1000;">
        <h2>Editar Usuário</h2>
        <form id="edit-user-form">
            <input type="hidden" id="edit-user-id">
            <div style="margin-bottom: 15px;">
                <label for="edit-email">E-mail:</label>
                <input type="email" id="edit-email" name="email" required
                    style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ddd;">
            </div>
            <div style="margin-bottom: 15px;">
                <label for="edit-nivel-acesso">Nível de Acesso:</label>
                <select id="edit-nivel-acesso" name="nivel_acesso" required
                    style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ddd;">
                    <option value="administrador">Administrador</option>
                    <option value="operador">Operador</option>
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="edit-senha">Nova Senha (opcional):</label>
                <input type="password" id="edit-senha" name="senha" placeholder="Deixe em branco para não alterar"
                    style="width: 100%; padding: 8px; border-radius: 4px; border: 1px solid #ddd;">
            </div>
            <div style="display: flex; justify-content: flex-end; gap: 10px;">
                <button type="button" id="cancel-edit"
                    style="background: #e74c3c; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Cancelar</button>
                <button type="submit"
                    style="background: #0E7F1B; color: #FFFFFF; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Salvar</button>
            </div>
        </form>
    </div>

    <div id="delete-user-modal"
        style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2); z-index: 1000;">
        <h2>Confirmar Exclusão</h2>
        <p>Tem certeza que deseja excluir o usuário ID <span id="delete-user-id"></span>?</p>
        <div style="display: flex; justify-content: flex-end; gap: 10px;">
            <button id="cancel-delete"
                style="background: #e74c3c; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Cancelar</button>
            <button id="confirm-delete"
                style="background: #0E7F1B; color: #FFFFFF; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Confirmar</button>
        </div>
    </div>

    <div id="modal-overlay"
        style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 999;">
    </div>

    <div id="toast" class="toast"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const hamburgerMenu = document.querySelector('.hamburger-menu');
            const navMenu = document.querySelector('.nav-menu');
            const overlay = document.querySelector('.overlay');
            const editModal = document.querySelector('#edit-user-modal');
            const deleteModal = document.querySelector('#delete-user-modal');
            const modalOverlay = document.querySelector('#modal-overlay');
            const editForm = document.querySelector('#edit-user-form');
            const cancelEditBtn = document.querySelector('#cancel-edit');
            const cancelDeleteBtn = document.querySelector('#cancel-delete');
            const confirmDeleteBtn = document.querySelector('#confirm-delete');
            const toast = document.querySelector('#toast');

            // Função para mostrar notificação toast  
            function showToast(message, duration = 3000) {
                toast.textContent = message;
                toast.classList.add('show');
                setTimeout(() => {
                    toast.classList.remove('show');
                }, duration);
            }

            // Função para abrir/fechar o menu hamburguer  
            hamburgerMenu.addEventListener('click', function () {
                this.classList.toggle('active');
                navMenu.classList.toggle('active');
                overlay.classList.toggle('active');
            });

            overlay.addEventListener('click', () => {
                hamburgerMenu.classList.remove('active');
                navMenu.classList.remove('active');
                overlay.classList.remove('active');
                closeEditModal();
                closeDeleteModal();
            });

            document.querySelectorAll('.nav-menu a').forEach(item => {
                item.addEventListener('click', () => {
                    hamburgerMenu.classList.remove('active');
                    navMenu.classList.remove('active');
                    overlay.classList.remove('active');
                });
            });

            // Função para abrir o modal de edição  
            function openEditModal(user) {
                document.querySelector('#edit-user-id').value = user.id;
                document.querySelector('#edit-email').value = user.email;
                document.querySelector('#edit-nivel-acesso').value = user.nivel_acesso;
                document.querySelector('#edit-senha').value = '';
                editModal.style.display = 'block';
                modalOverlay.style.display = 'block';
            }

            // Função para fechar o modal de edição  
            function closeEditModal() {
                editModal.style.display = 'none';
                modalOverlay.style.display = 'none';
            }

            // Função para abrir o modal de exclusão  
            function openDeleteModal(userId) {
                document.querySelector('#delete-user-id').textContent = userId;
                deleteModal.style.display = 'block';
                modalOverlay.style.display = 'block';
            }

            // Função para fechar o modal de exclusão  
            function closeDeleteModal() {
                deleteModal.style.display = 'none';
                modalOverlay.style.display = 'none';
            }

            // Evento para cancelar edição  
            cancelEditBtn.addEventListener('click', closeEditModal);

            // Evento para cancelar exclusão  
            cancelDeleteBtn.addEventListener('click', closeDeleteModal);

            // Event listeners para botões de editar  
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                    const userId = this.getAttribute('data-id');
                    try {
                        const response = await fetch(`/editar-usuario/${userId}`, {
                            method: 'GET',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        const user = await response.json();
                        if (response.ok) {
                            openEditModal(user);
                        } else {
                            showToast(user.error || 'Erro ao carregar usuário');
                        }
                    } catch (error) {
                        console.error('Erro:', error);
                        showToast('Erro ao carregar usuário');
                    }
                });
            });

            // Evento para salvar alterações  
            editForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                const userId = document.querySelector('#edit-user-id').value;
                const formData = {
                    email: document.querySelector('#edit-email').value,
                    nivel_acesso: document.querySelector('#edit-nivel-acesso').value,
                    senha: document.querySelector('#edit-senha').value || undefined
                };

                try {
                    const response = await fetch(`/editar-usuario/${userId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });
                    const result = await response.json();
                    if (response.ok) {
                        showToast('Usuário atualizado com sucesso!');
                        closeEditModal();
                        window.location.reload();
                    } else {
                        showToast(result.error || 'Erro ao atualizar usuário');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    showToast('Erro ao atualizar usuário');
                }
            });

            // Event listeners para botões de excluir  
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const userId = this.getAttribute('data-id');
                    openDeleteModal(userId);
                });
            });

            // Evento para confirmar exclusão  
            confirmDeleteBtn.addEventListener('click', async function () {
                const userId = document.querySelector('#delete-user-id').textContent;
                try {
                    const response = await fetch(`/usuarios/${userId}`, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const result = await response.json();
                    if (response.ok) {
                        showToast('Usuário excluído com sucesso!');
                        closeDeleteModal();
                        window.location.reload();
                    } else {
                        showToast(result.error || 'Erro ao excluir usuário');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    showToast('Erro ao excluir usuário');
                }
            });
        });
    </script>
</body>

</html>